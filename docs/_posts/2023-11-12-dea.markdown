---
layout: post
title:  Data Envelopment Analysis (DEA) in Python
date:   2023-11-12 06:25:17 -0800
categories: jekyll update
---

# Introduction

<a target="_blank" href="https://colab.research.google.com/github/jordan-hay/jordan-hay.github.io/blob/main/docs/assets/Data_Envelopment_Analysis_(DEA)_Analysis_in_Python.ipynb
">
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/>
</a>


In this blog post, we'll explore Data Envelopment Analysis (DEA) using Python. DEA is a powerful method for assessing the relative efficiency of decision-making units. We'll use the Gurobi optimization library for our analysis.

<div>                        <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>                <div id="3d374b76-2a9a-460c-839a-c2386cbff790" class="plotly-graph-div" style="height:100%; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("3d374b76-2a9a-460c-839a-c2386cbff790")) {                    Plotly.newPlot(                        "3d374b76-2a9a-460c-839a-c2386cbff790",                        [{"colorscale":[[0.0,"#440154"],[0.1111111111111111,"#482878"],[0.2222222222222222,"#3e4989"],[0.3333333333333333,"#31688e"],[0.4444444444444444,"#26828e"],[0.5555555555555556,"#1f9e89"],[0.6666666666666666,"#35b779"],[0.7777777777777778,"#6ece58"],[0.8888888888888888,"#b5de2b"],[1.0,"#fde725"]],"x":["Marketing","Equipment","Facility Space","Labor","Online Presence"],"y":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"z":[[2.8,5.5,2.8,2.8,2.8],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[9.4,9.4,26.8,9.8,13.8],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[1.2,1.2,13.9,1.2,1.2],[54.0,12.2,12.2,12.2,12.2],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[25.8,25.8,25.8,25.8,39.5],[22.2,22.2,46.2,53.4,34.9],[38.4,11.4,34.9,11.4,40.4],[0.5,0.5,28.4,18.2,0.5],[0.0,0.0,0.0,0.0,0.0],[71.5,25.0,38.3,49.7,25.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[56.4,4.1,4.1,44.6,4.1],[66.2,17.2,62.4,51.6,24.0],[0.0,0.0,0.0,0.0,0.0],[6.5,6.5,6.5,43.3,22.0],[15.1,16.0,34.4,38.9,15.1],[11.4,11.4,11.4,17.9,19.6],[16.0,16.0,23.8,41.0,32.1],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[56.5,11.1,11.1,12.1,11.1],[0.0,0.0,0.0,0.0,0.0],[8.6,8.6,21.7,13.3,8.6],[0.0,0.0,0.0,0.0,0.0],[7.4,7.4,7.4,7.4,19.0],[51.9,13.2,56.5,52.9,13.2],[21.5,21.5,21.5,34.8,26.1],[0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0],[23.0,11.2,37.9,39.2,11.2],[42.6,20.1,11.1,29.5,11.1],[4.4,6.1,4.4,24.4,4.4],[0.0,0.0,0.0,0.0,0.0],[33.4,19.3,14.2,22.3,14.2],[0.0,0.0,0.0,0.0,0.0],[8.3,14.1,1.9,1.9,1.9],[4.6,4.6,4.6,38.7,4.6],[21.4,16.7,16.7,16.7,18.9],[40.0,14.9,26.6,14.9,26.1],[16.5,7.9,35.8,12.9,7.9],[87.8,2.9,46.0,64.2,2.9],[0.0,0.0,0.0,0.0,0.0],[64.3,6.4,19.2,13.9,25.7],[53.4,26.8,56.0,27.4,49.4],[42.9,15.2,41.1,15.2,15.2],[11.0,10.6,10.6,10.6,10.6],[40.7,11.4,53.2,11.4,53.8],[0.0,0.0,0.0,0.0,0.0],[10.1,10.1,10.1,10.9,62.2],[4.6,4.6,4.6,41.5,4.6],[0.0,0.0,0.0,0.0,0.0],[66.3,27.5,66.1,27.5,34.6],[0.1,0.1,0.1,0.1,0.1],[46.0,17.7,53.9,17.7,38.4],[30.0,18.1,43.0,18.1,37.6],[26.4,6.4,42.3,30.4,6.4],[3.3,3.3,48.4,37.9,3.3]],"type":"heatmap"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"tickfont":{"size":16,"family":"Arial, sans-serif","color":"black"},"title":{"text":"Attribute","font":{"size":16,"family":"Arial, sans-serif","color":"black"}}},"yaxis":{"tickfont":{"size":16,"family":"Arial, sans-serif","color":"black"},"title":{"text":"Unit","font":{"size":16,"family":"Arial, sans-serif","color":"black"}}},"title":{"text":"Improvement Opportunities - Input Attributes"}},                        {"responsive": true}                    )                };                            </script>        </div>

## Getting Started

Let's start by importing the necessary libraries and downloading the dataset.

```python
import gdown
gdown.download('https://raw.githubusercontent.com/jordan-hay/jordan-hay.github.io/main/docs/assets/dea_data.csv','file.csv',quiet=True)

!pip install gurobipy &>/dev/null

import pandas as pd
import gurobipy as gp
from gurobipy import GRB
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('file.csv')
df.head()
```

## Data Exploration

Now, let's explore the dataset and understand its structure.

```python
dfcols = list(df.columns)
input_df = df[dfcols[1:6]]
output_df = df[dfcols[6:10]]

# Display the first few rows of input and output data
input_df.head()
output_df.head()
```
## DEA Linear Program

In DEA linear programming, a set of key components form the foundation of the model. These components include decision variables, an objective function, and a set of constraints.

1. **Decision Variables:**
   The decision variables $$u_i$$ and $$v_j$$ play a crucial role in determining the weights assigned to each output and input, respectively. Here, $$u_i$$ represents the weight for output $$i$$, where $$i$$ ranges from 1 to the total number of outputs ($$\text{n_outputs}$$). Similarly, $$v_j$$ signifies the weight for input $$j$$, spanning from 1 to the total number of inputs ($$\text{n_inputs}$$). These variables encapsulate the essence of the model, as they are optimized to unveil the most efficient distribution of weights.

2. **Objective Function:**
   The objective of the model is encapsulated in the maximization task defined by the objective function:
   
$$
   \text{Maximize} \quad \sum_{i=1}^{\text{n_outputs}} O_ei \cdot u_{i}
   $$
   
This function aims to maximize the sum of the weighted outputs ($$O_i$$) for a specific unit, denoted as $$e$$. The weights ($$u_{i}$$) assigned to each output contribute to the overall efficiency score, emphasizing the optimization of the chosen unit's performance.

3. **Constraints:**
   The model operates within the bounds of a set of constraints, reflecting the inherent limitations and requirements. The constraints are defined as follows:
   
$$
   \sum_{i=1}^{\text{n_outputs}} O_{ki} \cdot u_i \leq \sum_{j=1}^{\text{n_inputs}} I_{kj} \cdot v_j ,\quad k = 1 \ldots K
 $$
   
$$
   \sum_{j=1}^{\text{n_inputs}} I_{ej} \cdot v_j = 1
 $$

$$
u_i \geq 0, \quad i = 1 \ldots \text{n_outputs} 
$$

$$
v_j \geq 0, \quad j = 1 \ldots \text{n_inputs} 
$$

   The first constraint ensures that the weighted sum of outputs for each unit ($$k$$) does not exceed the weighted sum of inputs. The second constraint guarantees that the total weighted sum of inputs for a specific unit ($$e$$) is equal to 1. These constraints form the operational boundaries of the model, guiding the optimization process toward realistic and meaningful solutions.

In summary, these components collectively shape the linear programming model, providing a structured framework for assessing and maximizing the efficiency of decision-making units in diverse applications.

## DEA Analysis

We'll perform DEA analysis on the dataset using Gurobi.

```python
# Convert dataframes to numpy arrays
inputs = input_df.values
outputs = output_df.values

# Number of decision-making units and variables
n_units, n_inputs = inputs.shape
n_outputs = outputs.shape[1]

storage=[]
for unit in range(n_units):
  # Create a model
  model = gp.Model("DEA")
  model.setParam('OutputFlag', 0)

  # Add decision variables
  u = model.addVars(n_outputs, vtype=GRB.CONTINUOUS, name="u",lb=0.0)
  v = model.addVars(n_inputs, vtype=GRB.CONTINUOUS, name="v",lb = 0.0)
  # Add objective function (to be minimized)
  model.setObjective(gp.quicksum(x*y for x,y in zip(outputs[unit],u.values()) ), GRB.MAXIMIZE)

  # Add constraints
  for input,output in zip(inputs,outputs):
      model.addConstr(gp.quicksum(x*y for x,y in zip(output,u.values()) ) <= gp.quicksum(x*y for x,y in zip(input,v.values()) ))

  model.addConstr(gp.quicksum(x*y for x,y in zip(inputs[unit],v.values()) ) == 1)
  # Solve the model
  model.optimize()
  if model.status==2:
    print('OPTIMAL')
  else:
    print('*****')

  sp=[constr.Pi for constr in model.getConstrs()][0:-1]

  efficientin=[]
  for i in range(n_inputs):
    efficientin.append(np.dot(sp,inputs[:,i]))

  efficientout=[]
  for i in range(n_outputs):
    efficientout.append(np.dot(sp,outputs[:,i]))


  for i in range(n_inputs):
    imp = np.round(np.abs((np.dot(sp,inputs[:,i])-inputs[unit,i])/inputs[unit,i])*100,1)
    storage.append((unit,input_cols[i],'input',imp))
  for i in range(n_outputs):
    imp = np.round(np.abs((np.dot(sp,outputs[:,i])-outputs[unit,i])/outputs[unit,i])*100,1)

    storage.append((unit,output_cols[i],'output',imp))
```

## Results

Let's visualize the improvement opportunities for input and output attributes.

```python
# Display improvement opportunities for output attributes
pvdf_output = pd.pivot_table(data=df_final[df_final.Type=='output'],index=['Unit'],columns=['Attribute'],values=['Improvement Opportunity'],aggfunc=np.sum)
pvdf_output.columns = pvdf_output.columns.droplevel()

# Visualize improvement opportunities for output attributes
import seaborn as sns
sns.heatmap(pvdf_output.values, xticklabels=output_cols, cmap='viridis')
plt.title("Improvement Opportunities - Output Attributes")
plt.ylabel('Unit')
plt.show()

# Display improvement opportunities for input attributes
pvdf_input = pd.pivot_table(data=df_final[df_final.Type=='input'],index=['Unit'],columns=['Attribute'],values=['Improvement Opportunity'],aggfunc=np.sum)
pvdf_input.columns = pvdf_input.columns.droplevel()

# Visualize improvement opportunities for input attributes
import seaborn as sns
sns.heatmap(pvdf_input.values, xticklabels=input_cols, cmap='viridis')
plt.title("Improvement Opportunities - Input Attributes")
plt.ylabel('Unit')
plt.show()
```

We use heatmaps to visualize the improvement opportunities for both input and output attributes across different units.

## Conclusion

In this blog post, we've covered the implementation of DEA analysis using Python and Gurobi. The provided code provides insights into the efficiency of decision-making units.